upstream react-ptc {
  server react-ptc:80;
}

# server {
#   listen 443 ssl http2;
#   listen [::]:443 ssl http2;
#   server_name www.ptcore.test;
  
#   ssl_certificate /etc/ssl/ptcore.test-ca-full.pem;
#   ssl_certificate_key /etc/ssl/ptcore.test.key.pem;

#   return 301 https://ptcore.test$request_uri;
# }

# React debugger.
server {
  listen 9222;

  location / {
    proxy_pass http://react-ptc;
    proxy_set_header Host $host;
  }
}

server {
  # listen 80;
  # listen [::]:80;

  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name client.ptcore.test;

  ssl_certificate /etc/ssl/ptcore.test-ca-full.pem;
  ssl_certificate_key /etc/ssl/ptcore.test.key.pem;
  ssl_session_cache	shared:SSL:10m;
  ssl_session_timeout	4h;
  ssl_session_tickets on;

  ## ---------------------------------
  charset utf-8;
  # logging
  access_log /var/log/nginx/ptcore.access.log;
  error_log  /var/log/nginx/ptcore.error.log error;

  # php options
  client_max_body_size 5M;

  location / {
    proxy_pass http://react-ptc;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    # Keep HTTPS scheme to avoid Unsecure HTTP not HTTPS errors.
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

  location /ws {
      proxy_pass http://react-ptc;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
  }
}
